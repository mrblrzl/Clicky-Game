{"version":3,"sources":["components/CharacterCard/index.js","components/Container/index.js","components/Nav/index.js","Wrapper.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Container","children","Nav","href","rightWrong","score","topScore","Wrapper","concat","fluid","Jumbotron","App","state","characters","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","_ref","randomFriends","_this2","this","components_Container","components_Nav","Jumbotron_Jumbotron","src_Wrapper","map","components_CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20ed2afd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst CharacterCard = props => (\r\n  <div \r\n    className=\"card\" \r\n    value={props.id} \r\n    onClick={() => props.handleClick(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n    <nav className=\"navbar\">\r\n      <a href=\"/\">\r\n        Clicky Memory Game\r\n      </a>\r\n      <div >\r\n        <ul className=\"navbar-nav\">\r\n       <li id=\"rw\">{props.rightWrong}</li>\r\n\r\n      <li id=\"score\">Current Score: {props.score}</li>\r\n\r\n      <li id=\"top-score\">Top Score: {props.topScore}</li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n);\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nconst Wrapper = props =>\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n    <div className=\"jumbotron\">\r\n    <h1>Clicky Game</h1>\r\n        <p>\r\n            Don't click on the same character more than once!\r\n        </p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron","import React, { Component } from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport Container from \"./components/Container\";\r\nimport characters from \"./characters.json\";\r\nimport Nav from \"./components/Nav\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\r\n\r\n//Shuffle character cards \r\nfunction randomFriends(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n};\r\n\r\n\r\nclass App extends Component {\r\n \r\n  state = {\r\n    characters,\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    rightWrong: \"\",\r\n    clicked: [],\r\n  };\r\n\r\n  handleClick = id => {\r\n    if (this.state.clicked.indexOf(id) === -1) {\r\n      this.handleIncrement();\r\n      this.setState({ clicked: this.state.clicked.concat(id) });\r\n    } else {\r\n      this.handleReset();\r\n    }\r\n  };\r\n\r\n  handleIncrement = () => {\r\n    const newScore = this.state.currentScore + 1;\r\n    this.setState({\r\n      currentScore: newScore,\r\n      rightWrong: \"Nice Streak!\"\r\n    });\r\n    if (newScore >= this.state.topScore) {\r\n      this.setState({ topScore: newScore });\r\n    }\r\n    else if (newScore === 12) {\r\n      this.setState({ rightWrong: \"You win!\" });\r\n    }\r\n    this.handleShuffle();\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      currentScore: 0,\r\n      topScore: this.state.topScore,\r\n      rightWrong: \"Streak Over!\",\r\n      clicked: []\r\n    });\r\n    this.handleShuffle();\r\n  };\r\n\r\n  handleShuffle = () => {\r\n    let shuffledFriends = randomFriends(characters);\r\n    this.setState({ characters: shuffledFriends });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n          <Nav\r\n        score={this.state.currentScore}\r\n        topScore={this.state.topScore}\r\n        rightWrong={this.state.rightWrong}\r\n        />\r\n        <Jumbotron />\r\n        <Wrapper>\r\n        {this.state.characters.map(characters => (\r\n          <CharacterCard\r\n          key={characters.id}\r\n          handleClick={this.handleClick}\r\n          handleShuffle={this.handleShuffle}\r\n          id={characters.id}\r\n          image={characters.image}\r\n          />\r\n        ))}\r\n        </Wrapper>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}